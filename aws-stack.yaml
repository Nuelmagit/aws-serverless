AWSTemplateFormatVersion: '2010-09-09'
Description: TestServer
Parameters:
  envName:
    Description: The name of the deployment environment
    Type: String
    Default: dev
  bucketName:
    Description: The name of the S3 Bucket
    Type: String
    Default: content-s3-bucket
  HttpApiDomainName:
    Description: Api's domain name
    Type: String
  ApiCertificateArn:
    Description: Certificate's ARN
    Type: String
Resources:
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://content-deployments-123/269a776a0f02768212de73f25f9c1510
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: HttpApi
      AutoDeploy: true
      StageName: main
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - HttpApiAccessLogGroup
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength",
          "error": "$context.error.responseType" }'
  HttpApiDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId:
        Ref: HttpApi
      Stage:
        Ref: HttpApiStage
      DomainName:
        Ref: HttpApiDomainName
      ApiMappingKey: test-server
  HttpApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: HttpApi
      RetentionInDays: '120'
  HttpEndpointsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: ./adapters/entry-point.index
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
        - AppExecutionRole
        - Arn
      Code:
        S3Bucket: content-deployments-123
        S3Key: 2be29b410658ad446451eef7e4c92042
  HttpEndpointsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - HttpEndpointsLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*
  AppExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: allow-logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
